#Task 1
#School

#Make a class structure in python representing people at school. Make a base class called Person, a class called Student,
#and another one called Teacher.
#Try to find as many methods and attributes as you can which belong to different classes,
#and keep in mind which are common and which are not.
#For example, the name should be a Person attribute, while salary should only be available to the teacher. 

class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
        
    def talk(self):
        print(f"Hello! My name is {self.name}. I'm {self.age} years old and I identify as {self.gender}.")
        
class Student(Person):
    def __init__(self, name, age, gender, grades):
        super().__init__(name, age, gender) #take from main commom Person
        self.grades = grades #grades are for students
        self.studyprograms = []
        self.menteeprograms = []
        self.sportsteams = []
        
    def add_program(self, program): #method add_programs is for Students 
        self.studyprograms.append(program)
        print(f"{self.name} has enrolled into {program} class.")

    def add_menteeprogram(self,menteeprogram):
        self.menteeprograms.append(menteeprogram)
        print(f"{self.name} added {menteeprogram} to their schedule.")

    def add_sportsteam(self,sportsteam):
        self.sportsteams.append(sportsteam)
        print(f"{self.name} joined team {sportsteam} as extra curriculum activity.")
        
    def list_programs(self):
        print(f"{self.name}'s programs: {', '.join(self.studyprograms)}")
        
class Teacher(Person):
    def __init__(self, name, age, gender, subject, salary):
        super().__init__(name, age, gender) #common to all, taken from main class Person
        self.subject = subject
        self.salary = salary
        self.courses_mentored = [] 
        
    def add_course_mentored(self,course):
        self.courses_mentored.append(course)
        print(f"{self.name} will become a mentor of the {course}.")
        
    def list_courses_mentored(self):
        print(f"Courses mentored by {self.name}: {', '.join(self.courses_mentored)}")

person1 = Person("Isabella", 35, "female")
person1.talk()

student1 = Student("Anna", 16, "female", 10) #name age gender, grades 
student1.talk()
student1.add_program("Philosophy")
student1.add_menteeprogram("Rhetoric")
student1.add_sportsteam("Bengals")                    
student1.list_programs()

teacher1 = Teacher("Lilian", 45, "female", "Math", 50000)
teacher1.talk()
teacher1.add_course_mentored("Computer Science")
teacher1.add_course_mentored("Geometry")
teacher1.list_courses_mentored()

#вивiд 
#Hello! My name is Isabella. I'm 35 years old and I identify as female.
#Hello! My name is Anna. I'm 16 years old and I identify as female.
#Anna has enrolled into Philosophy class.
#Anna added Rhetoric to their schedule.
#Anna joined team Bengals as extra curriculum activity.
#Anna's programs: Philosophy
#Hello! My name is Lilian. I'm 45 years old and I identify as female.
#Lilian will become a mentor of the Computer Science.
#Lilian will become a mentor of the Geometry.
#Courses mentored by Lilian: Computer Science, Geometry



#Task2
#Mathematician
#Implement a class Mathematician which is a helper class for doing math operations on lists
#The class doesn't take any attributes and only has methods:

#square_nums (takes a list of integers and returns the list of squares)
#remove_positives (takes a list of integers and returns it without positive numbers
#filter_leaps (takes a list of dates (integers) and removes those that are not 'leap years'



class Mathematician:
    
    @staticmethod
    def square_nums(nums):
        """Returns list of squares of the numbers in the input list of integers."""
        return [n ** 2 for n in nums]
    
    @staticmethod
    def remove_positives(nums):
        """Returns a list of the input numbers without the positive ones."""
        return [n for n in nums if n <= 0]
    
    @staticmethod
    def remove_nonleaps(dates):
        """Returns a list of the input dates that are leap years."""
        return [year for year in dates if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0]

m = Mathematician()

assert m.square_nums([7, 11, 5, 4]) == [49, 121, 25, 16]

assert m.remove_positives([26, -11, -8, 13, -90]) == [-11, -8, -90]

assert m.remove_nonleaps([2001, 1884, 1995, 2003, 2020]) == [1884, 2020]

print(m.square_nums([7, 11, 5, 4]))
print(m.remove_positives([26, -11, -8, 13, -90]))
print(m.remove_nonleaps([2001, 1884, 1995, 2003, 2020]))



#Task 3
#Product Store

#Write a class Product that has three attributes:

#type
#name
#price
#Then create a class ProductStore, which will have some Products and will operate with all products in the store. All methods, in case they can’t perform its action, should raise ValueError with appropriate error information.
#Tips: Use aggregation/composition concepts while implementing the ProductStore class. You can also implement additional classes to operate on a certain type of product, etc.
#Also, the ProductStore class must have the following methods:
#add(product, amount) - adds a specified quantity of a single product with a predefined price premium for your store(30 percent)
#set_discount(identifier, percent, identifier_type=’name’) - adds a discount for all products specified by input identifiers (type or name). The discount must be specified in percentage
#sell_product(product_name, amount) - removes a particular amount of products from the store if available, in other case raises an error. It also increments income if the sell_product method succeeds.
#get_income() - returns amount of many earned by ProductStore instance.
#get_all_products() - returns information about all available products in the store.
#get_product_info(product_name) - returns a tuple with product name and amount of items in the store.

#Product Store
#class Product:
#    pass
#class ProductStore:
#pass
#p = Product('Sport', 'Football T-Shirt', 100)
#p2 = Product(Food, 'Ramen, 1.5)
#s = ProductStore()
#s.add_product(p, 10)
#s.add_product(p2, 300)
#s.sell_product(‘Ramen’, 10)
#assert s.get_product_info(‘Ramen’) == (‘Ramen’, 290)

class Product:
    def __init__(self, type, name, price):
        self.type = type
        self.name = name
        self.price = price

class ProductStore:
    def __init__(self):
        self.products = {}
        self.income = 0

    def add(self, product, amount): 
        if not isinstance(product, Product):
            raise ValueError("Invalid product")
        if product.name in self.products:
            self.products[product.name]['amount'] += amount
        else:
            self.products[product.name] = {'type': product.type, 'price': product.price * 1.3, 'amount': amount}

    def set_discount(self, identifier, percent, identifier_type='name'):
        if identifier_type not in ['name', 'type']:
            raise ValueError("Invalid identifier type")
        for name, product in self.products.items():
            if product[identifier_type] == identifier:
                product['price'] *= (100 - percent) / 100

    def sell_product(self, product_name, amount):
        if product_name not in self.products:
            raise ValueError("Product not found")
        if self.products[product_name]['amount'] < amount:
            raise ValueError("Not enough quantity of product")
        self.products[product_name]['amount'] -= amount
        self.income += self.products[product_name]['price'] * amount

    def get_income(self):
        return self.income

    def get_all_products(self):
        return self.products

    def get_product_info(self, product_name):
        if product_name not in self.products:
            raise ValueError("Product not found")
        return (product_name, self.products[product_name]['amount'])

p = Product('Sport', 'Football T-Shirt', 100) #type name price

p2 = Product('Food', 'Ramen', 1.5)

s = ProductStore()

s.add(p, 10) #added 10 Football T Shirts

s.add(p2, 300) #added 300 Ramen noodles

s.sell_product('Ramen', 10) #sold 10 Ramen noodles now we got 290

assert s.get_product_info("Ramen") == ("Ramen", 290)

print(s.get_product_info("Ramen")) #'Ramen', 290 остача 290 перевiрили чи вiрно виконались методи
print(s.get_all_products()) #{'Football T-Shirt': {'type': 'Sport', 'price': 130.0, 'amount': 10}, 'Ramen': {'type': 'Food', 'price': 1.9500000000000002, 'amount': 290}} #маэмо 10 доданих футболок и 290 Ramen
print(s.get_income()) #19.5 прибуток 

#Task4
#Custom exception
#Create your custom exception named `CustomException`,
#you can inherit from base Exception class, but extend its functionality 
#to log every error message to a file named `logs.txt`. 
#Tips: Use __init__ method to extend functionality for saving messages to file

class CustomException(Exception):
    def __init__(self, message):
        super().__init__(message) #батькiвська конструкцiя що iнiцiалiзуе exception з повiдомленням
        self.log_error(message)


    def log_error(self,message): #метод log error відкриває файл logs.txt в режимi append i записуе туди месседж. тепер при raise СustomExcepton вiн буде записувати помилку в файл logs.txt
        with open('logs.txt', 'a') as file:
            file.write(message + '\n')

try:
    p={x}/8
    raise CustomException("An error occurred")
except CustomException as e:
    # Handle the exception
    print(e)
#цей код запише error message до logs.txt i виведе помилку у консоль
